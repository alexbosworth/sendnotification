#!/usr/bin/env node
const {homedir} = require('os');
const {join} = require('path');
const {readFileSync} = require('fs');

const dotenv = require('dotenv');
const prog = require('caporal');
const {SNS} = require('aws-sdk');
const {sprintf} = require('sprintf-js');

const awsConf = require('./aws_conf');
const {name} = require('./package');
const {version} = require('./package');

const config = dotenv.config({path: join(homedir(), `.${name}/.env`)});
const sns = new SNS({apiVersion: awsConf.api_version});
const STDIN_FILENO = 0;

prog
  .version(version)
  .description('Send notifications based on stdin')
  .command('SNS', 'Send an SNS notification')
  .argument('<topic>', 'SNS topic to send notification to')
  .argument('<message>', 'Message to send')
  .option('--nonzero', `Don't send notification if input is zero`)
  .option('--subject', 'Subject line of message')
  .option('--test', 'Avoid actually posting to SNS, just log to console')
  .action((args, options, logger) => {
    return new Promise(async (resolve, reject) => {
      const input = readFileSync(STDIN_FILENO).toString().trim();

      if (!!options.nonzero && input === '0') {
        return resolve();
      }

      const Message = sprintf(args.message, input);
      const Subject = options.subject || undefined;
      const TopicArn = args.topic;

      if (!process.env.AWS_ACCESS_KEY_ID) {
        return reject(new Error('ExpectedAwsAccessKeyIdEnvToSendSns'));
      }

      if (!process.env.AWS_REGION) {
        return reject(new Error('ExpectedAwsRegionEnvToSendSns'));
      }

      if (!process.env.AWS_SECRET_ACCESS_KEY) {
        return reject(new Error('ExpectedAwsSecretAccessKeyEnvToSendSns'));
      }

      if (!!Subject) {
        logger.info(Subject);
      }

      logger.info(Message);

      // Exit early when just testing out the message
      if (!!options.test) {
        return resolve();
      }

      await sns.publish({Message, Subject, TopicArn}).promise();

      return resolve();
    });
  });

prog.parse(process.argv);
