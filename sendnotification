#!/usr/bin/env node
const {homedir} = require('os');
const {join} = require('path');
const {readFileSync} = require('fs');

const dotenv = require('dotenv');
const prog = require('caporal');
const {SNS} = require('aws-sdk');

const {apiVersion} = require('./aws');
const {name} = require('./package');
const {sendMailjetEmail} = require('./mailjet');
const {sendSnsNotification} = require('./aws');
const {version} = require('./package');

const config = dotenv.config({path: join(homedir(), `.${name}/.env`)});
const configLocal = dotenv.config();
const STDIN_FILENO = 0;

prog
  .version(version)
  .description('Send notifications based on stdin')
  .command('SNS', 'Send an SNS notification')
  .argument('<topic>', 'SNS topic to send notification to')
  .argument('<message>', 'Message to send')
  .option('--nonzero', `Don't send notification if input is zero`)
  .option('--subject', 'Subject line of message')
  .option('--test', 'Avoid actually posting to SNS, just log to console')
  .action((args, options, logger) => {
    return sendSnsNotification({
      logger,
      aws_access_key_id: process.env.AWS_ACCESS_KEY_ID,
      aws_region: process.env.AWS_REGION,
      aws_secret_access_key: process.env.AWS_SECRET_ACCESS_KEY,
      input: readFileSync(STDIN_FILENO).toString().trim(),
      is_nonzero: options.nonzero,
      is_test: options.test,
      message: args.message,
      sns: new SNS({apiVersion}),
      subject: options.subject,
      topic: args.topic,
    });
  })

  .command('MJ_EMAIL', 'Send a mailjet email')
  .argument('<from>', 'Email address to send email from')
  .argument('<to>', 'Email address to send email to')
  .argument('<message>', 'Message to send')
  .option('--subject', 'Subject line of message')
  .action((args, options, logger) => {
    return sendMailjetEmail({
      from: args.from,
      html: args.message,
      subject: options.subject,
      mj_apikey_private: process.env.MJ_APIKEY_PRIVATE,
      mj_apikey_public: process.env.MJ_APIKEY_PUBLIC,
      text: args.message,
      to: args.to,
    });
  });

prog.parse(process.argv);
